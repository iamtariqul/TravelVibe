rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own user profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Listings rules
    match /listings/{listingId} {
      // Anyone can read active listings
      // Hosts can read their own listings regardless of status
      // Users with bookings can read the listing
      allow read: if resource.data.status == 'active'
                  || (request.auth != null && request.auth.uid == resource.data.hostId)
                  || (request.auth != null && request.auth.uid in (resource.data.allowedViewers || []));

      // Only authenticated users (host) can create listings
      allow create: if request.auth != null 
                    && request.auth.uid == request.resource.data.hostId;

      // Only the host can update/delete their own listings
      allow update, delete: if request.auth != null 
                            && request.auth.uid == resource.data.hostId;
    }
    
    // Reviews rules
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if true;
      
      // Only authenticated users can create reviews
      allow create: if request.auth != null 
                    && request.auth.uid == request.resource.data.userId;
      
      // Only the review author can update/delete their reviews
      allow update, delete: if request.auth != null 
                            && request.auth.uid == resource.data.userId;
    }
    
    // Bookings rules
    match /bookings/{bookingId} {
      // Users can read their own bookings as guest or host
      allow read: if request.auth != null 
                  && (request.auth.uid == resource.data.guestId 
                      || request.auth.uid == resource.data.hostId);
      
      // Only authenticated users can create bookings as guest
      allow create: if request.auth != null 
                    && request.auth.uid == request.resource.data.guestId;
      
      // Hosts and guests can update their booking
      allow update: if request.auth != null 
                    && (request.auth.uid == resource.data.guestId 
                        || request.auth.uid == resource.data.hostId);
                        
      // Helper function to add guest to allowedViewers of property
      function addGuestToAllowedViewers() {
        // Example of what would need to be implemented in the booking creation logic
        // This is just documentation, not actual rules code
        /*
        // When creating a booking:
        const listingRef = doc(db, 'listings', bookingData.propertyId);
        await updateDoc(listingRef, {
          allowedViewers: arrayUnion(currentUser.uid)
        });
        */
      }
    }
  }
}
